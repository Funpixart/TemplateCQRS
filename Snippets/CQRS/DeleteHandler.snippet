<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
    <CodeSnippet Format="1.0.0">
        <Header>
            <Title>Delete Handler</Title>
            <Shortcut>createDeleteHandler</Shortcut>
            <Description>Code snippet for a Delete Handler class in CQRS</Description>
            <Author>Sparkymod</Author>
            <SnippetTypes>
                <SnippetType>Expansion</SnippetType>
            </SnippetTypes>
        </Header>
        <Snippet>
            <Declarations>
                <Literal>
                    <ID>Model</ID>
                    <Default>Model</Default>
                </Literal>
            </Declarations>
            <Code Language="csharp"><![CDATA[
using $Namespace$.Commands;
using $Namespace$.Validators;
using Microsoft.AspNetCore.OutputCaching;

namespace $Namespace$;

public class Delete$Model$CommandHandler : IRequestHandler<Delete$Model$Command, Payload<Unit, List<ValidationFailure>>>
{
    private readonly Delete$Model$CommandValidator _validator;
    private readonly IRepository<$Model$> _repository;
    private readonly IOutputCacheStore _outputCacheStore;

    public Delete$Model$CommandHandler(Delete$Model$CommandValidator validator, IRepository<$Model$> repository,
        IOutputCacheStore outputCacheStore)
    {
        _validator = validator;
        _repository = repository;
        _outputCacheStore = outputCacheStore;
    }

    public async Task<Payload<Unit, List<ValidationFailure>>> Handle(Delete$Model$Command request, CancellationToken cancellationToken)
    {
        // Catch possible exceptions and let the others exception propagate.
        try
        {
            // Validate the request.
            var validationResult = await _validator.ValidateAsync(request, cancellationToken);

            // If there were any validation errors, return a failure payload.
            if (validationResult.Errors.Count > 0) return validationResult.Errors;
            
            // Get the model by the Id
            var model = await _repository.GetByIdAsync(request.Id);
            if (model is not null)
            {
                await _repository.DeleteAsync(request.Id);
                
                // Refresh cache for the data modified.
                await _outputCacheStore.EvictByTagAsync(CachePolicy.Get$Model$s.Name, cancellationToken);
            }
            else
            {
                validationResult.Errors.Add(new ValidationFailure
                {
                    ErrorCode = StatusCodes.Status400BadRequest.ToString(),
                    ErrorMessage = "$Model$ not found or was deleted already."
                });
            }

            // If there were any validation errors, return a failure payload, otherwise, success.
            return validationResult.Errors.Count > 0 ? validationResult.Errors : Unit.Value;
        }
        catch (Exception ex)
        {
            return ErrorHelper.LogExceptionAndReturnError<Delete$Model$Handler>(ex);
        }
    }
}

            ]]></Code>
        </Snippet>
    </CodeSnippet>
</CodeSnippets>
