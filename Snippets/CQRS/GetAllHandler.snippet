<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
    <CodeSnippet Format="1.0.0">
        <Header>
            <Title>GetAll Handler</Title>
            <Shortcut>createGetAllHandler</Shortcut>
            <Description>Code snippet for a Get All Handler class in CQRS</Description>
            <Author>Sparkymod</Author>
            <SnippetTypes>
                <SnippetType>Expansion</SnippetType>
            </SnippetTypes>
        </Header>
        <Snippet>
            <Declarations>
                <Literal>
                    <ID>Model</ID>
                    <Default>Model</Default>
                </Literal>
            </Declarations>
            <Code Language="csharp"><![CDATA[
using $Namespace$.Queries;

namespace $Namespace$;

public class GetAll$Model$QueryHandler : IRequestHandler<GetAll$Model$sQuery, Payload<List<Info$Model$Dto>, List<ValidationFailure>>>
{
    private readonly IMapper _mapper;
    private readonly IRepository<$Model$> _repository;

    public GetAll$Model$QueryHandler(IMapper mapper, IRepository<$Model$> repository)
    {
        _mapper = mapper;
        _repository = repository;
    }

    public async Task<Payload<List<Info$Model$Dto>, List<ValidationFailure>>> Handle(GetAll$Model$sQuery request, CancellationToken cancellationToken)
    {
        var errors = new List<ValidationFailure>();
        try
        {
            var result = await _repository.GetAllAsync(cancellationToken);
            if (!result.Any())
            {
                errors.Add(new ValidationFailure
                {
                    ErrorCode = StatusCodes.Status204NoContent.ToString(),
                    ErrorMessage = "Nothing to return."
                });
                return errors;
            }

            var modelMapped = _mapper.Map<List<Info$Model$Dto>>(result);
            if (modelMapped is null)
            {
                errors.Add(new ValidationFailure
                {
                    ErrorCode = StatusCodes.Status500InternalServerError.ToString(),
                    ErrorMessage = "$Model$s wasn't able to be mapped."
                });
            }

            // If there were any validation errors, return a failure payload.
            return errors.Count > 0 ? errors : modelMapped!;
        }
        catch (Exception ex)
        {
            return ErrorHelper.LogExceptionAndReturnError<GetAll$Model$QueryHandler>(ex);
        }
    }
}

            ]]></Code>
        </Snippet>
    </CodeSnippet>
</CodeSnippets>
